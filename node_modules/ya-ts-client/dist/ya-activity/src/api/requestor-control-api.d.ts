/**
 * Yagna Activity API
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../configuration';
import { RequestArgs, BaseAPI } from '../../base';
import { CreateActivityRequest } from '../../src/models';
import { CreateActivityResult } from '../../src/models';
import { ExeScriptCommandResult } from '../../src/models';
import { ExeScriptRequest } from '../../src/models';
/**
 * RequestorControlApi - axios parameter creator
 * @export
 */
export declare const RequestorControlApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Sends encrypted command to secure exe-unit.
     * @param {string} activityId
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callEncrypted: (activityId: string, body: any, options?: any) => Promise<RequestArgs>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Creates new Activity based on given Agreement.
     * @param {string | CreateActivityRequest} stringCreateActivityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActivity: (stringCreateActivityRequest: string | CreateActivityRequest, options?: any) => Promise<RequestArgs>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Destroys given Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyActivity: (activityId: string, options?: any) => Promise<RequestArgs>;
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Executes an ExeScript batch within a given Activity.
     * @param {string} activityId
     * @param {ExeScriptRequest} script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exec: (activityId: string, script: ExeScriptRequest, options?: any) => Promise<RequestArgs>;
    /**
     * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
     * @summary Queries for ExeScript batch results.
     * @param {string} activityId
     * @param {string} batchId
     * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecBatchResults: (activityId: string, batchId: string, commandIndex?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * RequestorControlApi - functional programming interface
 * @export
 */
export declare const RequestorControlApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Sends encrypted command to secure exe-unit.
     * @param {string} activityId
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callEncrypted(activityId: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Creates new Activity based on given Agreement.
     * @param {string | CreateActivityRequest} stringCreateActivityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActivity(stringCreateActivityRequest: string | CreateActivityRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string | CreateActivityResult>>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Destroys given Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyActivity(activityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Executes an ExeScript batch within a given Activity.
     * @param {string} activityId
     * @param {ExeScriptRequest} script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exec(activityId: string, script: ExeScriptRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
     * @summary Queries for ExeScript batch results.
     * @param {string} activityId
     * @param {string} batchId
     * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecBatchResults(activityId: string, batchId: string, commandIndex?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExeScriptCommandResult>>>;
};
/**
 * RequestorControlApi - factory interface
 * @export
 */
export declare const RequestorControlApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Sends encrypted command to secure exe-unit.
     * @param {string} activityId
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callEncrypted(activityId: string, body: any, options?: any): AxiosPromise<any>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Creates new Activity based on given Agreement.
     * @param {string | CreateActivityRequest} stringCreateActivityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActivity(stringCreateActivityRequest: string | CreateActivityRequest, options?: any): AxiosPromise<string | CreateActivityResult>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Destroys given Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyActivity(activityId: string, options?: any): AxiosPromise<void>;
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Executes an ExeScript batch within a given Activity.
     * @param {string} activityId
     * @param {ExeScriptRequest} script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exec(activityId: string, script: ExeScriptRequest, options?: any): AxiosPromise<string>;
    /**
     * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
     * @summary Queries for ExeScript batch results.
     * @param {string} activityId
     * @param {string} batchId
     * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecBatchResults(activityId: string, batchId: string, commandIndex?: number, options?: any): AxiosPromise<Array<ExeScriptCommandResult>>;
};
/**
 * RequestorControlApi - interface
 * @export
 * @interface RequestorControlApi
 */
export interface RequestorControlApiInterface {
    /**
     *
     * @summary Sends encrypted command to secure exe-unit.
     * @param {string} activityId
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApiInterface
     */
    callEncrypted(activityId: string, body: any, options?: any): AxiosPromise<any>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Creates new Activity based on given Agreement.
     * @param {string | CreateActivityRequest} stringCreateActivityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApiInterface
     */
    createActivity(stringCreateActivityRequest: string | CreateActivityRequest, options?: any): AxiosPromise<string | CreateActivityResult>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Destroys given Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApiInterface
     */
    destroyActivity(activityId: string, options?: any): AxiosPromise<void>;
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Executes an ExeScript batch within a given Activity.
     * @param {string} activityId
     * @param {ExeScriptRequest} script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApiInterface
     */
    exec(activityId: string, script: ExeScriptRequest, options?: any): AxiosPromise<string>;
    /**
     * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
     * @summary Queries for ExeScript batch results.
     * @param {string} activityId
     * @param {string} batchId
     * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApiInterface
     */
    getExecBatchResults(activityId: string, batchId: string, commandIndex?: number, options?: any): AxiosPromise<Array<ExeScriptCommandResult>>;
}
/**
 * RequestorControlApi - object-oriented interface
 * @export
 * @class RequestorControlApi
 * @extends {BaseAPI}
 */
export declare class RequestorControlApi extends BaseAPI implements RequestorControlApiInterface {
    /**
     *
     * @summary Sends encrypted command to secure exe-unit.
     * @param {string} activityId
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    callEncrypted(activityId: string, body: any, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Creates new Activity based on given Agreement.
     * @param {string | CreateActivityRequest} stringCreateActivityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    createActivity(stringCreateActivityRequest: string | CreateActivityRequest, options?: any): Promise<import("axios").AxiosResponse<string | CreateActivityResult>>;
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Destroys given Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    destroyActivity(activityId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Executes an ExeScript batch within a given Activity.
     * @param {string} activityId
     * @param {ExeScriptRequest} script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    exec(activityId: string, script: ExeScriptRequest, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
     * @summary Queries for ExeScript batch results.
     * @param {string} activityId
     * @param {string} batchId
     * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    getExecBatchResults(activityId: string, batchId: string, commandIndex?: number, options?: any): Promise<import("axios").AxiosResponse<ExeScriptCommandResult[]>>;
}

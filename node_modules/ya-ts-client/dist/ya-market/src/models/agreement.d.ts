/**
 * Yagna Market API
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Demand } from './demand';
import { Offer } from './offer';
/**
 *
 * @export
 * @interface Agreement
 */
export interface Agreement {
    /**
     *
     * @type {string}
     * @memberof Agreement
     */
    agreementId: string;
    /**
     *
     * @type {Demand}
     * @memberof Agreement
     */
    demand: Demand;
    /**
     *
     * @type {Offer}
     * @memberof Agreement
     */
    offer: Offer;
    /**
     * End of validity period.  Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire.
     * @type {string}
     * @memberof Agreement
     */
    validTo: string;
    /**
     * Agreement approval timestamp
     * @type {string}
     * @memberof Agreement
     */
    approvedDate?: string;
    /**
     * * `Proposal` - newly created by a Requestor (draft based on Proposal) * `Pending` - confirmed by a Requestor and send to Provider for approval * `Cancelled` by a Requestor * `Rejected` by a Provider * `Approved` by both sides * `Expired` - not approved, rejected nor cancelled within validity period * `Terminated` - finished after approval.
     * @type {string}
     * @memberof Agreement
     */
    state: AgreementStateEnum;
    /**
     *
     * @type {string}
     * @memberof Agreement
     */
    timestamp: string;
    /**
     * A correlation/session identifier used for querying events related to an action where this appSessionId has been specified.
     * @type {string}
     * @memberof Agreement
     */
    appSessionId?: string;
    /**
     *
     * @type {string}
     * @memberof Agreement
     */
    proposedSignature?: string;
    /**
     *
     * @type {string}
     * @memberof Agreement
     */
    approvedSignature?: string;
    /**
     *
     * @type {string}
     * @memberof Agreement
     */
    committedSignature?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum AgreementStateEnum {
    Proposal = "Proposal",
    Pending = "Pending",
    Cancelled = "Cancelled",
    Rejected = "Rejected",
    Approved = "Approved",
    Expired = "Expired",
    Terminated = "Terminated"
}

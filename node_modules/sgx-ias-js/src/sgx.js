"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SgxReportBody = exports.SgxQuoteBody = exports.SgxQuote = exports.parse_measurement = exports.ENCLAVE_FLAGS_NEEDED = exports.SGX_XFRM_RESERVED = exports.SGX_XFRM_MPX = exports.SGX_XFRM_AVX512 = exports.SGX_XFRM_AVX = exports.SGX_XFRM_LEGACY = exports.SGX_FLAGS_RESERVED = exports.SGX_FLAGS_KSS = exports.SGX_FLAGS_EINITTOKEN_KEY = exports.SGX_FLAGS_PROVISION_KEY = exports.SGX_FLAGS_MODE64BIT = exports.SGX_FLAGS_DEBUG = exports.SGX_FLAGS_INITTED = void 0;
const types_1 = require("./types");
exports.SGX_FLAGS_INITTED = 1;
exports.SGX_FLAGS_DEBUG = 2;
exports.SGX_FLAGS_MODE64BIT = 4;
exports.SGX_FLAGS_PROVISION_KEY = 16;
exports.SGX_FLAGS_EINITTOKEN_KEY = 32;
exports.SGX_FLAGS_KSS = 128;
exports.SGX_FLAGS_RESERVED = !(exports.SGX_FLAGS_INITTED
    | exports.SGX_FLAGS_DEBUG
    | exports.SGX_FLAGS_MODE64BIT
    | exports.SGX_FLAGS_PROVISION_KEY
    | exports.SGX_FLAGS_EINITTOKEN_KEY
    | exports.SGX_FLAGS_KSS);
exports.SGX_XFRM_LEGACY = 3;
exports.SGX_XFRM_AVX = 6;
exports.SGX_XFRM_AVX512 = 230;
exports.SGX_XFRM_MPX = 24;
exports.SGX_XFRM_RESERVED = !(exports.SGX_XFRM_LEGACY | exports.SGX_XFRM_AVX);
exports.ENCLAVE_FLAGS_NEEDED = types_1.toU64(exports.SGX_FLAGS_INITTED | exports.SGX_FLAGS_MODE64BIT);
const SZ_SGX_REPORT_DATA = 64;
const SZ_SGX_REPORT_BODY = 320 + SZ_SGX_REPORT_DATA;
const SZ_SGX_QUOTE_BODY = 48 + SZ_SGX_REPORT_BODY;
exports.parse_measurement = (hex) => types_1.bytes.Bytes32.fromHex(hex);
class SgxQuote {
    constructor(body, bytes, signature) {
        this.body = body;
        this.bytes = bytes;
        this.signature = signature;
    }
    static from(bytes) {
        let body = SgxQuoteBody.from(bytes);
        let quote = new SgxQuote(body, bytes);
        if (bytes.byteLength == SZ_SGX_QUOTE_BODY) {
            return quote;
        }
        else if (bytes.byteLength < SZ_SGX_QUOTE_BODY + 4) {
            throw new Error("Invalid quote body signature length");
        }
        let view = new DataView(bytes.buffer, 0);
        let off = SZ_SGX_QUOTE_BODY;
        let sig_sz = view.getUint32(off, types_1.LITTLE_ENDIAN);
        off += 4;
        if (bytes.byteLength != SZ_SGX_QUOTE_BODY + 4 + sig_sz) {
            throw new Error("Invalid quote body signature size");
        }
        quote.signature = Uint8Array.from(bytes.slice(off, off + sig_sz));
        return quote;
    }
    static default() {
        return new SgxQuote(SgxQuoteBody.default(), new Uint8Array(0));
    }
}
exports.SgxQuote = SgxQuote;
class SgxQuoteBody {
    constructor(version, sign_type, epid_group_id, qe_svn, pce_svn, xeid, basename, report_body) {
        this.version = version;
        this.sign_type = sign_type;
        this.epid_group_id = epid_group_id;
        this.qe_svn = qe_svn;
        this.pce_svn = pce_svn;
        this.xeid = xeid;
        this.basename = basename;
        this.report_body = report_body;
    }
    static from(bytes) {
        if (bytes.byteLength < SZ_SGX_QUOTE_BODY) {
            throw new Error("Invalid quote body size");
        }
        let body = Object.create(this.prototype);
        let view = new DataView(bytes.buffer, 0);
        let off = 0;
        body.version = types_1.toU16(view.getUint16(off, types_1.LITTLE_ENDIAN));
        off += 2;
        body.sign_type = types_1.toU16(view.getUint16(off, types_1.LITTLE_ENDIAN));
        off += 2;
        body.epid_group_id = types_1.bytes.Bytes4.from(bytes, off);
        off += types_1.bytes.Bytes4.size;
        body.qe_svn = types_1.toU16(view.getUint16(off, types_1.LITTLE_ENDIAN));
        off += 2;
        body.pce_svn = types_1.toU16(view.getUint16(off, types_1.LITTLE_ENDIAN));
        off += 2;
        body.xeid = types_1.toU32(view.getUint32(off, types_1.LITTLE_ENDIAN));
        off += 4;
        body.basename = types_1.bytes.Bytes32.from(bytes, off);
        off += types_1.bytes.Bytes32.size;
        body.report_body = SgxReportBody.from(bytes.slice(off));
        return body;
    }
    static default() {
        return new SgxQuoteBody(types_1.toU16(0), types_1.toU16(0), types_1.bytes.Bytes4.default(), types_1.toU16(0), types_1.toU16(0), types_1.toU32(0), types_1.bytes.Bytes32.default(), SgxReportBody.default());
    }
}
exports.SgxQuoteBody = SgxQuoteBody;
class SgxReportBody {
    constructor(cpu_svn, misc_select, reserved1, isv_ext_prod_id, attributes, mr_enclave, reserved2, mr_signer, reserved3, config_id, isv_prod_id, isv_svn, config_svn, reserved4, isv_family_id, report_data) {
        this.cpu_svn = cpu_svn;
        this.misc_select = misc_select;
        this.reserved1 = reserved1;
        this.isv_ext_prod_id = isv_ext_prod_id;
        this.attributes = attributes;
        this.mr_enclave = mr_enclave;
        this.reserved2 = reserved2;
        this.mr_signer = mr_signer;
        this.reserved3 = reserved3;
        this.config_id = config_id;
        this.isv_prod_id = isv_prod_id;
        this.isv_svn = isv_svn;
        this.config_svn = config_svn;
        this.reserved4 = reserved4;
        this.isv_family_id = isv_family_id;
        this.report_data = report_data;
    }
    static from(bytes) {
        if (bytes.byteLength < SZ_SGX_REPORT_BODY) {
            throw new Error("Invalid report body size");
        }
        let body = Object.create(this.prototype);
        let view = new DataView(bytes.buffer, 0);
        let off = 0;
        body.cpu_svn = types_1.bytes.Bytes16.from(bytes, off);
        off += types_1.bytes.Bytes16.size;
        body.misc_select = types_1.toU32(view.getUint32(off));
        off += 4;
        body.reserved1 = types_1.bytes.Bytes12.from(bytes, off);
        off += types_1.bytes.Bytes12.size;
        body.isv_ext_prod_id = types_1.bytes.Bytes16.from(bytes, off);
        off += types_1.bytes.Bytes16.size;
        let flags = types_1.toU64(bytes.slice(off, off + 8));
        off += 8;
        let xfrm = types_1.toU64(bytes.slice(off, off + 8));
        off += 8;
        body.attributes = {
            flags: flags,
            xfrm: xfrm,
        };
        body.mr_enclave = types_1.bytes.Bytes32.from(bytes, off);
        off += types_1.bytes.Bytes32.size;
        body.reserved2 = types_1.bytes.Bytes32.from(bytes, off);
        off += types_1.bytes.Bytes32.size;
        body.mr_signer = types_1.bytes.Bytes32.from(bytes, off);
        off += types_1.bytes.Bytes32.size;
        body.reserved3 = types_1.bytes.Bytes32.from(bytes, off);
        off += types_1.bytes.Bytes32.size;
        body.config_id = types_1.bytes.Bytes64.from(bytes, off);
        off += types_1.bytes.Bytes64.size;
        body.isv_prod_id = view.getUint16(off, types_1.LITTLE_ENDIAN);
        off += 2;
        body.isv_svn = view.getUint16(off, types_1.LITTLE_ENDIAN);
        off += 2;
        body.config_svn = view.getUint16(off, types_1.LITTLE_ENDIAN);
        off += 2;
        body.reserved4 = types_1.bytes.Bytes42.from(bytes, off);
        off += types_1.bytes.Bytes42.size;
        body.isv_family_id = types_1.bytes.Bytes16.from(bytes, off);
        off += types_1.bytes.Bytes16.size;
        body.report_data = types_1.bytes.Bytes64.from(bytes, off);
        off += types_1.bytes.Bytes64.size;
        return body;
    }
    static default() {
        return new SgxReportBody(types_1.bytes.Bytes16.default(), types_1.toU32(0), types_1.bytes.Bytes12.default(), types_1.bytes.Bytes16.default(), {
            flags: types_1.toU64(0),
            xfrm: types_1.toU64(0),
        }, types_1.bytes.Bytes32.default(), types_1.bytes.Bytes32.default(), types_1.bytes.Bytes32.default(), types_1.bytes.Bytes32.default(), types_1.bytes.Bytes64.default(), types_1.toU16(0), types_1.toU16(0), types_1.toU16(0), types_1.bytes.Bytes42.default(), types_1.bytes.Bytes16.default(), types_1.bytes.Bytes64.default());
    }
}
exports.SgxReportBody = SgxReportBody;
//# sourceMappingURL=sgx.js.map
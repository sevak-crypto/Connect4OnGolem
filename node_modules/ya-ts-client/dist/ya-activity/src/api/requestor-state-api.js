"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Yagna Activity API
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorStateApi = exports.RequestorStateApiFactory = exports.RequestorStateApiFp = exports.RequestorStateApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../../base");
/**
 * RequestorStateApi - axios parameter creator
 * @export
 */
exports.RequestorStateApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get state of specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityState: (activityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            if (activityId === null || activityId === undefined) {
                throw new base_1.RequiredError('activityId', 'Required parameter activityId was null or undefined when calling getActivityState.');
            }
            const localVarPath = `/activity/{activityId}/state`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? yield configuration.accessToken()
                    : yield configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get usage of specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityUsage: (activityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            if (activityId === null || activityId === undefined) {
                throw new base_1.RequiredError('activityId', 'Required parameter activityId was null or undefined when calling getActivityUsage.');
            }
            const localVarPath = `/activity/{activityId}/usage`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? yield configuration.accessToken()
                    : yield configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * **Note:** This call shall get routed directly to ExeUnit.
         * @summary Get running commands for a specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunningCommand: (activityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            if (activityId === null || activityId === undefined) {
                throw new base_1.RequiredError('activityId', 'Required parameter activityId was null or undefined when calling getRunningCommand.');
            }
            const localVarPath = `/activity/{activityId}/command`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? yield configuration.accessToken()
                    : yield configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RequestorStateApi - functional programming interface
 * @export
 */
exports.RequestorStateApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get state of specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityState(activityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RequestorStateApiAxiosParamCreator(configuration).getActivityState(activityId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Get usage of specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityUsage(activityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RequestorStateApiAxiosParamCreator(configuration).getActivityUsage(activityId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * **Note:** This call shall get routed directly to ExeUnit.
         * @summary Get running commands for a specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunningCommand(activityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RequestorStateApiAxiosParamCreator(configuration).getRunningCommand(activityId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * RequestorStateApi - factory interface
 * @export
 */
exports.RequestorStateApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get state of specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityState(activityId, options) {
            return exports.RequestorStateApiFp(configuration).getActivityState(activityId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get usage of specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityUsage(activityId, options) {
            return exports.RequestorStateApiFp(configuration).getActivityUsage(activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * **Note:** This call shall get routed directly to ExeUnit.
         * @summary Get running commands for a specified Activity.
         * @param {string} activityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunningCommand(activityId, options) {
            return exports.RequestorStateApiFp(configuration).getRunningCommand(activityId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RequestorStateApi - object-oriented interface
 * @export
 * @class RequestorStateApi
 * @extends {BaseAPI}
 */
class RequestorStateApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get state of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorStateApi
     */
    getActivityState(activityId, options) {
        return exports.RequestorStateApiFp(this.configuration).getActivityState(activityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get usage of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorStateApi
     */
    getActivityUsage(activityId, options) {
        return exports.RequestorStateApiFp(this.configuration).getActivityUsage(activityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Get running commands for a specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorStateApi
     */
    getRunningCommand(activityId, options) {
        return exports.RequestorStateApiFp(this.configuration).getRunningCommand(activityId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RequestorStateApi = RequestorStateApi;

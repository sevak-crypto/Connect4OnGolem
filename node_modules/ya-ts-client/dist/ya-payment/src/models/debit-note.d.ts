/**
 * Yagna Payment API
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.**
 *
 * The version of the OpenAPI document: 1.6.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { InvoiceStatus } from './invoice-status';
/**
 * A Debit Note is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It is a notification of Total Amount Due incurred by Activities in this Agreement until the moment the Debit Note is issued. This is expected to be used as trigger for payment in upfront-payment or pay-as-you-go scenarios.  NOTE: Debit Notes flag the current Total Amount Due, which is accumulated from the start of Agreement. Debit Notes are expected to trigger payments, therefore payment amount for the newly received Debit Note is expected to be determined by difference of Total Payments for the Agreement vs Total Amount Due.
 * @export
 * @interface DebitNote
 */
export interface DebitNote {
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    debitNoteId: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    issuerId: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    recipientId: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    payeeAddr?: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    payerAddr?: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    paymentPlatform?: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    previousDebitNoteId?: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    agreementId: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    activityId: string;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    totalAmountDue: string;
    /**
     *
     * @type {object}
     * @memberof DebitNote
     */
    usageCounterVector?: object;
    /**
     *
     * @type {string}
     * @memberof DebitNote
     */
    paymentDueDate?: string;
    /**
     *
     * @type {InvoiceStatus}
     * @memberof DebitNote
     */
    status: InvoiceStatus;
}

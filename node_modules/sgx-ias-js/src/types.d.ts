export declare const LITTLE_ENDIAN = true;
export declare type u8 = number & {
    _U8: void;
};
export declare type u16 = number & {
    _U16: void;
};
export declare type u32 = number & {
    _U32: void;
};
export declare type u64 = bytes.Bytes8 & {
    _U64: void;
};
export declare const toU8: (n: number) => u8;
export declare const toU16: (n: number) => u16;
export declare const toU32: (n: number) => u32;
export declare const toU64: (src: number | Uint8Array) => u64;
export declare const u64Flag: (l: u64, r: u64) => boolean;
export declare const toHex: (arr: Uint8Array) => string;
export declare const parseHex: (str: string) => Uint8Array;
export declare namespace bytes {
    class Bytes {
        static size: number;
        inner: Uint8Array;
        protected constructor(arr: Uint8Array);
        static default(): Bytes;
        static from(arr: Uint8Array, offset?: number): Bytes;
        static fromHex(hex: string): Bytes;
        eq(other: Bytes): boolean;
        partialEq(other: Uint8Array): boolean;
        into(): Uint8Array;
        toString(radix?: number): string;
    }
    class Bytes2 extends Bytes {
        static size: number;
    }
    class Bytes4 extends Bytes {
        static size: number;
    }
    class Bytes8 extends Bytes {
        static size: number;
    }
    class Bytes12 extends Bytes {
        static size: number;
    }
    class Bytes16 extends Bytes {
        static size: number;
    }
    class Bytes32 extends Bytes {
        static size: number;
    }
    class Bytes42 extends Bytes {
        static size: number;
    }
    class Bytes64 extends Bytes {
        static size: number;
    }
    class Bytes384 extends Bytes {
        static size: number;
    }
}

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationVerifier = exports.AttestationVerdict = exports.IAS_PUBLIC_KEY_PEM = void 0;
const js_base64_1 = __importDefault(require("js-base64"));
const js_sha512_1 = __importDefault(require("js-sha512"));
const jsrsasign_1 = __importDefault(require("jsrsasign"));
const dayjs_1 = __importDefault(require("dayjs"));
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
const sgx = __importStar(require("./sgx"));
const ty = __importStar(require("./types"));
dayjs_1.default.extend(duration_1.default);
dayjs_1.default.extend(utc_1.default);
exports.IAS_PUBLIC_KEY_PEM = `
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqXot4OZuphR8nudFrAFi
aGxxkgma/Es/BA+tbeCTUR106AL1ENcWA4FX3K+E9BBL0/7X5rj5nIgX/R/1ubhk
KWw9gfqPG3KeAtIdcv/uTO1yXv50vqaPvE1CRChvzdS/ZEBqQ5oVvLTPZ3VEicQj
lytKgN9cLnxbwtuvLUK7eyRPfJW/ksddOzP8VBBniolYnRCD2jrMRZ8nBM2ZWYwn
XnwYeOAHV+W9tOhAImwRwKF/95yAsVwd21ryHMJBcGH70qLagZ7Ttyt++qO/6+KA
XJuKwZqjRlEtSEz8gZQeFfVYgcwSfo96oSMAzVr7V0L6HSDLRnpb6xxmbPdqNol4
tQIDAQAB
-----END PUBLIC KEY-----
`;
var AttestationVerdict;
(function (AttestationVerdict) {
    AttestationVerdict[AttestationVerdict["Ok"] = 0] = "Ok";
    AttestationVerdict[AttestationVerdict["InvalidIasReport"] = 1] = "InvalidIasReport";
    AttestationVerdict[AttestationVerdict["InvalidMrEnclave"] = 2] = "InvalidMrEnclave";
    AttestationVerdict[AttestationVerdict["InvalidMrSigner"] = 3] = "InvalidMrSigner";
    AttestationVerdict[AttestationVerdict["InvalidIsvProdId"] = 4] = "InvalidIsvProdId";
    AttestationVerdict[AttestationVerdict["InvalidIsvSvn"] = 5] = "InvalidIsvSvn";
    AttestationVerdict[AttestationVerdict["InvalidQuoteStatus"] = 6] = "InvalidQuoteStatus";
    AttestationVerdict[AttestationVerdict["InvalidFlags"] = 7] = "InvalidFlags";
    AttestationVerdict[AttestationVerdict["InvalidReportData"] = 8] = "InvalidReportData";
})(AttestationVerdict = exports.AttestationVerdict || (exports.AttestationVerdict = {}));
class AttestationVerifier {
    constructor(evidence, report, quote, hasher, result, check_data = false) {
        this.evidence = evidence;
        this.report = report;
        this.quote = quote;
        this.hasher = hasher;
        this.result = result;
        this.check_data = check_data;
    }
    static from(response) {
        let result = { verdict: AttestationVerdict.Ok };
        let report;
        let quote;
        try {
            report = JSON.parse(response.report);
        }
        catch (e) {
            report = {
                id: "",
                timestamp: "",
                version: ty.toU16(0),
                isvEnclaveQuoteStatus: "",
                isvEnclaveQuoteBody: "",
            };
            result = {
                verdict: AttestationVerdict.InvalidIasReport,
                message: `Failed to parse IAS report: ${e}`,
            };
        }
        try {
            if (result.verdict != AttestationVerdict.Ok) {
                throw new Error("verdict: failure");
            }
            quote = sgx.SgxQuote.from(js_base64_1.default.toUint8Array(report.isvEnclaveQuoteBody));
        }
        catch (e) {
            result = {
                verdict: AttestationVerdict.InvalidIasReport,
                message: `Failed to decode enclave quote: ${e}`,
            };
            quote = sgx.SgxQuote.default();
        }
        return new AttestationVerifier(response, report, quote, js_sha512_1.default.create(), result);
    }
    valid() {
        return this.result.verdict === AttestationVerdict.Ok;
    }
    data(data) {
        if (this.valid()) {
            this.hasher.update(data);
            this.check_data = true;
        }
        return this;
    }
    nonce(nonce) {
        if (this.valid() && this.report.nonce !== nonce) {
            this.result = {
                verdict: AttestationVerdict.InvalidIasReport,
                message: "Invalid nonce",
            };
        }
        return this;
    }
    mr_enclave(mr) {
        if (this.valid() && !mr.eq(this.quote.body.report_body.mr_enclave)) {
            this.result = {
                verdict: AttestationVerdict.InvalidMrEnclave,
                message: this.quote.body.report_body.mr_enclave.toString(16),
            };
        }
        return this;
    }
    mr_enclave_list(mrs) {
        let this_mr = this.quote.body.report_body.mr_enclave;
        if (this.valid() && !mrs.some((_mr) => this_mr.eq(_mr))) {
            this.result = {
                verdict: AttestationVerdict.InvalidMrEnclave,
                message: this.quote.body.report_body.mr_enclave.toString(16),
            };
        }
        return this;
    }
    mr_signer(mr) {
        if (this.valid() && !mr.eq(this.quote.body.report_body.mr_signer)) {
            this.result = {
                verdict: AttestationVerdict.InvalidMrSigner,
                message: this.quote.body.report_body.mr_signer.toString(16),
            };
        }
        return this;
    }
    mr_signer_list(mrs) {
        let this_mr = this.quote.body.report_body.mr_signer;
        if (this.valid() && !mrs.some((_mr) => this_mr.eq(_mr))) {
            this.result = {
                verdict: AttestationVerdict.InvalidMrSigner,
                message: this.quote.body.report_body.mr_signer.toString(16),
            };
        }
        return this;
    }
    isv_prod_id(id) {
        if (this.valid() && id != this.quote.body.report_body.isv_prod_id) {
            this.result = {
                verdict: AttestationVerdict.InvalidIsvProdId,
                message: this.quote.body.report_body.isv_prod_id.toString(16),
            };
        }
        return this;
    }
    isv_svn(svn) {
        if (this.valid() && svn != this.quote.body.report_body.isv_svn) {
            this.result = {
                verdict: AttestationVerdict.InvalidIsvSvn,
                message: this.quote.body.report_body.isv_svn.toString(16),
            };
        }
        return this;
    }
    not_outdated() {
        let quote_status = this.report.isvEnclaveQuoteStatus.toUpperCase();
        if (this.valid() && quote_status == "GROUP_OUT_OF_DATE") {
            this.result = {
                verdict: AttestationVerdict.InvalidQuoteStatus,
                message: this.report.isvEnclaveQuoteStatus,
            };
        }
        return this;
    }
    not_debug() {
        let quote_flags = this.quote.body.report_body.attributes.flags;
        if (this.valid() && ty.u64Flag(quote_flags, ty.toU64(sgx.SGX_FLAGS_DEBUG))) {
            this.result = {
                verdict: AttestationVerdict.InvalidFlags,
                message: "Enclave has DEBUG flag enabled",
            };
        }
        return this;
    }
    max_age(age) {
        if (!this.valid()) {
            return this;
        }
        try {
            let ts = Date.parse(this.report.timestamp);
            let dur = dayjs_1.default.duration({ seconds: age });
            let now = dayjs_1.default.utc().toDate().getTime();
            if (ts + dur.asMilliseconds() < now) {
                this.result = {
                    verdict: AttestationVerdict.InvalidIasReport,
                    message: "IAS response is too old",
                };
            }
        }
        catch (e) {
            this.result = {
                verdict: AttestationVerdict.InvalidFlags,
                message: "Failed to parse report timestamp",
            };
        }
        return this;
    }
    verify_sig() {
        let key = jsrsasign_1.default.KEYUTIL.getKey(exports.IAS_PUBLIC_KEY_PEM);
        let sig = new jsrsasign_1.default.KJUR.crypto.Signature({ alg: "SHA256withRSA" });
        sig.init(key);
        sig.updateString(this.evidence.report);
        if (!sig.verify(ty.toHex(this.evidence.signature))) {
            this.result = {
                verdict: AttestationVerdict.InvalidIasReport,
                message: "Invalid IAS signature",
            };
            return false;
        }
        return true;
    }
    verify() {
        if (!this.valid()) {
            return this.result;
        }
        if (!this.verify_sig()) {
            return this.result;
        }
        let quote_status = this.report.isvEnclaveQuoteStatus.toUpperCase();
        if (quote_status != "OK" && quote_status != "GROUP_OUT_OF_DATE") {
            this.result = {
                verdict: AttestationVerdict.InvalidQuoteStatus,
                message: this.report.isvEnclaveQuoteStatus,
            };
            return this.result;
        }
        let flags = this.quote.body.report_body.attributes.flags;
        if (!ty.u64Flag(flags, sgx.ENCLAVE_FLAGS_NEEDED)) {
            this.result = {
                verdict: AttestationVerdict.InvalidFlags,
                message: "Enclave is not initialized or not 64bit",
            };
            return this.result;
        }
        if (this.check_data) {
            let report_data = this.quote.body.report_body.report_data;
            let hash = new Uint8Array(this.hasher.arrayBuffer());
            if (!report_data.partialEq(hash)) {
                this.result = {
                    verdict: AttestationVerdict.InvalidReportData,
                    message: this.quote.body.report_body.report_data.toString(16),
                };
                return this.result;
            }
        }
        return this.result;
    }
}
exports.AttestationVerifier = AttestationVerifier;
//# sourceMappingURL=attest.js.map
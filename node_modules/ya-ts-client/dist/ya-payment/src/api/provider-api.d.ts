/**
 * Yagna Payment API
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.**
 *
 * The version of the OpenAPI document: 1.6.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../configuration';
import { RequestArgs, BaseAPI } from '../../base';
import { Account } from '../../src/models';
import { DebitNote } from '../../src/models';
import { DebitNoteEvent } from '../../src/models';
import { Invoice } from '../../src/models';
import { InvoiceEvent } from '../../src/models';
import { Payment } from '../../src/models';
/**
 * ProviderApi - axios parameter creator
 * @export
 */
export declare const ProviderApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it.
     * @summary Cancel Debit Note.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDebitNote: (debitNoteId: string, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it.
     * @summary Cancel Invoice.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvoice: (invoiceId: string, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNote: (debitNoteId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNoteEvents: (timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNotes: (afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice: (invoiceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceEvents: (timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices: (afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment: (paymentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments: (timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForDebitNote: (debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice: (invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get available accounts for receiving payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviderAccounts: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Issue a Debit Note.
     * @param {DebitNote} debitNote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueDebitNote: (debitNote: DebitNote, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueInvoice: (invoice: Invoice, options?: any) => Promise<RequestArgs>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed.
     * @summary Send Debit Note to Requestor.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendDebitNote: (debitNoteId: string, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed.
     * @summary Send Invoice to Requestor.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInvoice: (invoiceId: string, timeout?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * ProviderApi - functional programming interface
 * @export
 */
export declare const ProviderApiFp: (configuration?: Configuration) => {
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it.
     * @summary Cancel Debit Note.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDebitNote(debitNoteId: string, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it.
     * @summary Cancel Invoice.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvoice(invoiceId: string, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNote(debitNoteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebitNote>>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DebitNoteEvent>>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DebitNote>>>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceEvent>>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Get available accounts for receiving payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviderAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>>;
    /**
     *
     * @summary Issue a Debit Note.
     * @param {DebitNote} debitNote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueDebitNote(debitNote: DebitNote, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebitNote>>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueInvoice(invoice: Invoice, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed.
     * @summary Send Debit Note to Requestor.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendDebitNote(debitNoteId: string, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed.
     * @summary Send Invoice to Requestor.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInvoice(invoiceId: string, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ProviderApi - factory interface
 * @export
 */
export declare const ProviderApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it.
     * @summary Cancel Debit Note.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDebitNote(debitNoteId: string, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it.
     * @summary Cancel Invoice.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvoice(invoiceId: string, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNote(debitNoteId: string, options?: any): AxiosPromise<DebitNote>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<DebitNoteEvent>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<DebitNote>>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, options?: any): AxiosPromise<Invoice>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<InvoiceEvent>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): AxiosPromise<Payment>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get available accounts for receiving payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviderAccounts(options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Issue a Debit Note.
     * @param {DebitNote} debitNote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueDebitNote(debitNote: DebitNote, options?: any): AxiosPromise<DebitNote>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueInvoice(invoice: Invoice, options?: any): AxiosPromise<Invoice>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed.
     * @summary Send Debit Note to Requestor.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendDebitNote(debitNoteId: string, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed.
     * @summary Send Invoice to Requestor.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInvoice(invoiceId: string, timeout?: number, options?: any): AxiosPromise<void>;
};
/**
 * ProviderApi - interface
 * @export
 * @interface ProviderApi
 */
export interface ProviderApiInterface {
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it.
     * @summary Cancel Debit Note.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    cancelDebitNote(debitNoteId: string, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it.
     * @summary Cancel Invoice.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    cancelInvoice(invoiceId: string, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getDebitNote(debitNoteId: string, options?: any): AxiosPromise<DebitNote>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<DebitNoteEvent>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<DebitNote>>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getInvoice(invoiceId: string, options?: any): AxiosPromise<Invoice>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<InvoiceEvent>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getPayment(paymentId: string, options?: any): AxiosPromise<Payment>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get available accounts for receiving payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getProviderAccounts(options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Issue a Debit Note.
     * @param {DebitNote} debitNote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    issueDebitNote(debitNote: DebitNote, options?: any): AxiosPromise<DebitNote>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    issueInvoice(invoice: Invoice, options?: any): AxiosPromise<Invoice>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed.
     * @summary Send Debit Note to Requestor.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    sendDebitNote(debitNoteId: string, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed.
     * @summary Send Invoice to Requestor.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    sendInvoice(invoiceId: string, timeout?: number, options?: any): AxiosPromise<void>;
}
/**
 * ProviderApi - object-oriented interface
 * @export
 * @class ProviderApi
 * @extends {BaseAPI}
 */
export declare class ProviderApi extends BaseAPI implements ProviderApiInterface {
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it.
     * @summary Cancel Debit Note.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    cancelDebitNote(debitNoteId: string, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it.
     * @summary Cancel Invoice.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    cancelInvoice(invoiceId: string, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getDebitNote(debitNoteId: string, options?: any): Promise<import("axios").AxiosResponse<DebitNote>>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<import("axios").AxiosResponse<DebitNoteEvent[]>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<DebitNote[]>>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getInvoice(invoiceId: string, options?: any): Promise<import("axios").AxiosResponse<Invoice>>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<import("axios").AxiosResponse<InvoiceEvent[]>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Invoice[]>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getPayment(paymentId: string, options?: any): Promise<import("axios").AxiosResponse<Payment>>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<import("axios").AxiosResponse<Payment[]>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Payment[]>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Payment[]>>;
    /**
     *
     * @summary Get available accounts for receiving payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getProviderAccounts(options?: any): Promise<import("axios").AxiosResponse<Account[]>>;
    /**
     *
     * @summary Issue a Debit Note.
     * @param {DebitNote} debitNote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    issueDebitNote(debitNote: DebitNote, options?: any): Promise<import("axios").AxiosResponse<DebitNote>>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    issueInvoice(invoice: Invoice, options?: any): Promise<import("axios").AxiosResponse<Invoice>>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed.
     * @summary Send Debit Note to Requestor.
     * @param {string} debitNoteId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    sendDebitNote(debitNoteId: string, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed.
     * @summary Send Invoice to Requestor.
     * @param {string} invoiceId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    sendInvoice(invoiceId: string, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
}

import * as sgx from "./sgx";
import * as ty from "./types";
export declare const IAS_PUBLIC_KEY_PEM: string;
export interface AttestationRequest {
    isvEnclaveQuote: string;
    nonce?: string;
}
export interface AttestationResponse {
    report: string;
    signature: Uint8Array;
}
export interface AttestationResult {
    verdict: AttestationVerdict;
    message?: string;
}
export declare enum AttestationVerdict {
    Ok = 0,
    InvalidIasReport = 1,
    InvalidMrEnclave = 2,
    InvalidMrSigner = 3,
    InvalidIsvProdId = 4,
    InvalidIsvSvn = 5,
    InvalidQuoteStatus = 6,
    InvalidFlags = 7,
    InvalidReportData = 8
}
export interface AttestationReport {
    id: string;
    timestamp: string;
    version: ty.u16;
    isvEnclaveQuoteStatus: string;
    isvEnclaveQuoteBody: string;
    revocationReason?: string;
    pseManifestStatus?: string;
    pseManifestHash?: string;
    platformInfoBlob?: string;
    nonce?: string;
    epidPseudonym?: string;
    advisoryURL?: string;
    advisoryIDs?: string[];
}
export declare class AttestationVerifier {
    private evidence;
    private report;
    private quote;
    private hasher;
    private result;
    private check_data;
    constructor(evidence: AttestationResponse, report: AttestationReport, quote: sgx.SgxQuote, hasher: any, result: AttestationResult, check_data?: boolean);
    static from(response: AttestationResponse): AttestationVerifier;
    private valid;
    data(data: Uint8Array): AttestationVerifier;
    nonce(nonce: string): AttestationVerifier;
    mr_enclave(mr: sgx.SgxMeasurement): AttestationVerifier;
    mr_enclave_list(mrs: sgx.SgxMeasurement[]): AttestationVerifier;
    mr_signer(mr: sgx.SgxMeasurement): AttestationVerifier;
    mr_signer_list(mrs: sgx.SgxMeasurement[]): AttestationVerifier;
    isv_prod_id(id: ty.u16): AttestationVerifier;
    isv_svn(svn: ty.u16): AttestationVerifier;
    not_outdated(): AttestationVerifier;
    not_debug(): AttestationVerifier;
    max_age(age: number): AttestationVerifier;
    private verify_sig;
    verify(): AttestationResult;
}

/**
 * Yagna Activity API
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../configuration';
import { RequestArgs, BaseAPI } from '../../base';
import { ActivityState } from '../../src/models';
import { ActivityUsage } from '../../src/models';
import { ProviderEvent } from '../../src/models';
/**
 * ProviderApi - axios parameter creator
 * @export
 */
export declare const ProviderApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Fetch Requestor command events.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectActivityEvents: (appSessionId?: string, afterTimestamp?: string, timeout?: number, maxEvents?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get state of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityState: (activityId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get usage of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityUsage: (activityId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Set state of specified Activity.
     * @param {string} activityId
     * @param {ActivityState} activityState
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setActivityState: (activityId: string, activityState: ActivityState, options?: any) => Promise<RequestArgs>;
};
/**
 * ProviderApi - functional programming interface
 * @export
 */
export declare const ProviderApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Fetch Requestor command events.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectActivityEvents(appSessionId?: string, afterTimestamp?: string, timeout?: number, maxEvents?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProviderEvent>>>;
    /**
     *
     * @summary Get state of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityState(activityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityState>>;
    /**
     *
     * @summary Get usage of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityUsage(activityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityUsage>>;
    /**
     *
     * @summary Set state of specified Activity.
     * @param {string} activityId
     * @param {ActivityState} activityState
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setActivityState(activityId: string, activityState: ActivityState, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ProviderApi - factory interface
 * @export
 */
export declare const ProviderApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Fetch Requestor command events.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectActivityEvents(appSessionId?: string, afterTimestamp?: string, timeout?: number, maxEvents?: number, options?: any): AxiosPromise<Array<ProviderEvent>>;
    /**
     *
     * @summary Get state of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityState(activityId: string, options?: any): AxiosPromise<ActivityState>;
    /**
     *
     * @summary Get usage of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityUsage(activityId: string, options?: any): AxiosPromise<ActivityUsage>;
    /**
     *
     * @summary Set state of specified Activity.
     * @param {string} activityId
     * @param {ActivityState} activityState
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setActivityState(activityId: string, activityState: ActivityState, options?: any): AxiosPromise<void>;
};
/**
 * ProviderApi - interface
 * @export
 * @interface ProviderApi
 */
export interface ProviderApiInterface {
    /**
     *
     * @summary Fetch Requestor command events.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    collectActivityEvents(appSessionId?: string, afterTimestamp?: string, timeout?: number, maxEvents?: number, options?: any): AxiosPromise<Array<ProviderEvent>>;
    /**
     *
     * @summary Get state of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getActivityState(activityId: string, options?: any): AxiosPromise<ActivityState>;
    /**
     *
     * @summary Get usage of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    getActivityUsage(activityId: string, options?: any): AxiosPromise<ActivityUsage>;
    /**
     *
     * @summary Set state of specified Activity.
     * @param {string} activityId
     * @param {ActivityState} activityState
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    setActivityState(activityId: string, activityState: ActivityState, options?: any): AxiosPromise<void>;
}
/**
 * ProviderApi - object-oriented interface
 * @export
 * @class ProviderApi
 * @extends {BaseAPI}
 */
export declare class ProviderApi extends BaseAPI implements ProviderApiInterface {
    /**
     *
     * @summary Fetch Requestor command events.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    collectActivityEvents(appSessionId?: string, afterTimestamp?: string, timeout?: number, maxEvents?: number, options?: any): Promise<import("axios").AxiosResponse<ProviderEvent[]>>;
    /**
     *
     * @summary Get state of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getActivityState(activityId: string, options?: any): Promise<import("axios").AxiosResponse<ActivityState>>;
    /**
     *
     * @summary Get usage of specified Activity.
     * @param {string} activityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    getActivityUsage(activityId: string, options?: any): Promise<import("axios").AxiosResponse<ActivityUsage>>;
    /**
     *
     * @summary Set state of specified Activity.
     * @param {string} activityId
     * @param {ActivityState} activityState
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApi
     */
    setActivityState(activityId: string, activityState: ActivityState, options?: any): Promise<import("axios").AxiosResponse<void>>;
}

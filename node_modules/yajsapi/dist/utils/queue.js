"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const csp = __importStar(require("js-csp"));
const promisify_1 = __importDefault(require("./promisify"));
class Queue {
    constructor(list = []) {
        this._tasks = list;
        this.__new_items = csp.chan();
        if (list.length > 0) {
            csp.putAsync(this.__new_items, true);
        }
    }
    put(item) {
        if (item === undefined || item === null || this.__new_items.closed)
            return;
        this._tasks.push(item);
        csp.putAsync(this.__new_items, true);
    }
    async get() {
        return new Promise(async (resolve, reject) => {
            if (this.__new_items.closed)
                reject("new_items channel interrupted");
            try {
                await promisify_1.default(csp.takeAsync)(this.__new_items);
                let item = this._tasks.shift();
                resolve(item);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    empty() {
        return this._tasks.length === 0;
    }
    close() {
        this.__new_items.close();
    }
}
exports.default = Queue;
//# sourceMappingURL=queue.js.map
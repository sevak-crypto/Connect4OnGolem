import { bytes as by, u16, u32, u64 } from "./types";
export declare const SGX_FLAGS_INITTED = 1;
export declare const SGX_FLAGS_DEBUG = 2;
export declare const SGX_FLAGS_MODE64BIT = 4;
export declare const SGX_FLAGS_PROVISION_KEY = 16;
export declare const SGX_FLAGS_EINITTOKEN_KEY = 32;
export declare const SGX_FLAGS_KSS = 128;
export declare const SGX_FLAGS_RESERVED: boolean;
export declare const SGX_XFRM_LEGACY = 3;
export declare const SGX_XFRM_AVX = 6;
export declare const SGX_XFRM_AVX512 = 230;
export declare const SGX_XFRM_MPX = 24;
export declare const SGX_XFRM_RESERVED: boolean;
export declare const ENCLAVE_FLAGS_NEEDED: u64;
export declare type SgxMiscSelect = u32;
export declare type SgxKey = by.Bytes16;
export declare type SgxKeyId = by.Bytes32;
export declare type SgxIsvSvn = u16;
export declare type SgxConfigSvn = u16;
export declare type SgxConfigId = by.Bytes64;
export declare type SgxCpuSvn = by.Bytes16;
export declare type SgxSpid = by.Bytes16;
export declare type SgxBasename = by.Bytes32;
export declare type SgxEpidGroupId = by.Bytes4;
export declare type SgxProdId = u16;
export declare type SgxIsvExtProdId = by.Bytes16;
export declare type SgxIsvFamilyId = by.Bytes16;
export declare type SgxMeasurement = by.Bytes32;
export declare type SgxMac = by.Bytes16;
export declare type SgxReportData = by.Bytes64;
export declare const parse_measurement: (hex: string) => SgxMeasurement;
export declare class SgxQuote {
    body: SgxQuoteBody;
    bytes: Uint8Array;
    signature?: Uint8Array;
    private constructor();
    static from(bytes: Uint8Array): SgxQuote;
    static default(): SgxQuote;
}
export declare class SgxQuoteBody {
    version: u16;
    sign_type: u16;
    epid_group_id: SgxEpidGroupId;
    qe_svn: SgxIsvSvn;
    pce_svn: SgxIsvSvn;
    xeid: u32;
    basename: SgxBasename;
    report_body: SgxReportBody;
    constructor(version: u16, sign_type: u16, epid_group_id: SgxEpidGroupId, qe_svn: SgxIsvSvn, pce_svn: SgxIsvSvn, xeid: u32, basename: SgxBasename, report_body: SgxReportBody);
    static from(bytes: Uint8Array): SgxQuoteBody;
    static default(): SgxQuoteBody;
}
export interface SgxReport {
    body: SgxReportBody;
    key_id: SgxKeyId;
    mac: SgxMac;
    bytes: Uint8Array;
}
export declare class SgxReportBody {
    cpu_svn: SgxCpuSvn;
    misc_select: SgxMiscSelect;
    reserved1: by.Bytes12;
    isv_ext_prod_id: SgxIsvExtProdId;
    attributes: SgxAttributes;
    mr_enclave: SgxMeasurement;
    reserved2: by.Bytes32;
    mr_signer: SgxMeasurement;
    reserved3: by.Bytes32;
    config_id: SgxConfigId;
    isv_prod_id: SgxProdId;
    isv_svn: SgxIsvSvn;
    config_svn: SgxConfigSvn;
    reserved4: by.Bytes42;
    isv_family_id: SgxIsvFamilyId;
    report_data: SgxReportData;
    constructor(cpu_svn: SgxCpuSvn, misc_select: SgxMiscSelect, reserved1: by.Bytes12, isv_ext_prod_id: SgxIsvExtProdId, attributes: SgxAttributes, mr_enclave: SgxMeasurement, reserved2: by.Bytes32, mr_signer: SgxMeasurement, reserved3: by.Bytes32, config_id: SgxConfigId, isv_prod_id: SgxProdId, isv_svn: SgxIsvSvn, config_svn: SgxConfigSvn, reserved4: by.Bytes42, isv_family_id: SgxIsvFamilyId, report_data: SgxReportData);
    static from(bytes: Uint8Array): SgxReportBody;
    static default(): SgxReportBody;
}
export interface SgxAttributes {
    flags: u64;
    xfrm: u64;
}
export interface SgxMiscAttribute {
    secs_attr: SgxAttributes;
    misc_select: SgxMiscSelect;
}
export interface SgxTargetInfo {
    mr_enclave: SgxMeasurement;
    attributes: SgxAttributes;
    reserved1: by.Bytes2;
    config_svn: SgxConfigSvn;
    misc_select: SgxMiscSelect;
    reserved2: by.Bytes8;
    config_id: SgxConfigId;
    reserved3: by.Bytes384;
    bytes: Uint8Array;
}

/**
 * Yagna Activity API
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ActivityUsage
 */
export interface ActivityUsage {
    /**
     * Current vector of usage counters consumed by the Activity. The sequence of values corresponds to Usage Vector property (golem.usage.vector) as indicated in the Agreement (Offer part).
     * @type {Array<number>}
     * @memberof ActivityUsage
     */
    currentUsage?: Array<number>;
    /**
     * Usage update timestamp (UTC)
     * @type {number}
     * @memberof ActivityUsage
     */
    timestamp: number;
}

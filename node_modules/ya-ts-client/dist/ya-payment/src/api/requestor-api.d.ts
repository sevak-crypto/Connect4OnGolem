/**
 * Yagna Payment API
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.**
 *
 * The version of the OpenAPI document: 1.6.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../../configuration';
import { RequestArgs, BaseAPI } from '../../base';
import { Acceptance } from '../../src/models';
import { Account } from '../../src/models';
import { Allocation } from '../../src/models';
import { DebitNote } from '../../src/models';
import { DebitNoteEvent } from '../../src/models';
import { Invoice } from '../../src/models';
import { InvoiceEvent } from '../../src/models';
import { MarketDecoration } from '../../src/models';
import { Payment } from '../../src/models';
import { Rejection } from '../../src/models';
/**
 * RequestorApi - axios parameter creator
 * @export
 */
export declare const RequestorApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.
     * @summary Accept received Debit Note.
     * @param {string} debitNoteId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDebitNote: (debitNoteId: string, acceptance: Acceptance, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.
     * @summary Accept received Invoice.
     * @param {string} invoiceId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvoice: (invoiceId: string, acceptance: Acceptance, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Amend Allocation.
     * @param {string} allocationId
     * @param {Allocation} allocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amendAllocation: (allocationId: string, allocation: Allocation, options?: any) => Promise<RequestArgs>;
    /**
     * Allocate funds to make sure they are not spent elsewhere.
     * @summary Create Allocation.
     * @param {Allocation} allocation
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAllocation: (allocation: Allocation, afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocation: (allocationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Allocations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocations: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNote: (debitNoteId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNoteEvents: (timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNotes: (afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand.
     * @summary Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
     * @param {Array<string>} allocationIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDemandDecorations: (allocationIds: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice: (invoiceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceEvents: (timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices: (afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment: (paymentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments: (timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForDebitNote: (debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice: (invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get available accounts for sending payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRequestorAccounts: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueInvoice: (invoice: Invoice, options?: any) => Promise<RequestArgs>;
    /**
     * Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Debit Note.
     * @param {string} debitNoteId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectDebitNote: (debitNoteId: string, rejection: Rejection, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Invoice.
     * @param {string} invoiceId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectInvoice: (invoiceId: string, rejection: Rejection, timeout?: number, options?: any) => Promise<RequestArgs>;
    /**
     * The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit).
     * @summary Release Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseAllocation: (allocationId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * RequestorApi - functional programming interface
 * @export
 */
export declare const RequestorApiFp: (configuration?: Configuration) => {
    /**
     * Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.
     * @summary Accept received Debit Note.
     * @param {string} debitNoteId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDebitNote(debitNoteId: string, acceptance: Acceptance, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.
     * @summary Accept received Invoice.
     * @param {string} invoiceId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvoice(invoiceId: string, acceptance: Acceptance, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Amend Allocation.
     * @param {string} allocationId
     * @param {Allocation} allocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amendAllocation(allocationId: string, allocation: Allocation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Allocation>>;
    /**
     * Allocate funds to make sure they are not spent elsewhere.
     * @summary Create Allocation.
     * @param {Allocation} allocation
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAllocation(allocation: Allocation, afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Allocation>>;
    /**
     *
     * @summary Get Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocation(allocationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Allocation>>;
    /**
     *
     * @summary Get Allocations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Allocation>>>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNote(debitNoteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebitNote>>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DebitNoteEvent>>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DebitNote>>>;
    /**
     * Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand.
     * @summary Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
     * @param {Array<string>} allocationIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDemandDecorations(allocationIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarketDecoration>>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceEvent>>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Get available accounts for sending payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRequestorAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueInvoice(invoice: Invoice, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     * Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Debit Note.
     * @param {string} debitNoteId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectDebitNote(debitNoteId: string, rejection: Rejection, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Invoice.
     * @param {string} invoiceId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectInvoice(invoiceId: string, rejection: Rejection, timeout?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit).
     * @summary Release Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseAllocation(allocationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RequestorApi - factory interface
 * @export
 */
export declare const RequestorApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.
     * @summary Accept received Debit Note.
     * @param {string} debitNoteId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDebitNote(debitNoteId: string, acceptance: Acceptance, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.
     * @summary Accept received Invoice.
     * @param {string} invoiceId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvoice(invoiceId: string, acceptance: Acceptance, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Amend Allocation.
     * @param {string} allocationId
     * @param {Allocation} allocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amendAllocation(allocationId: string, allocation: Allocation, options?: any): AxiosPromise<Allocation>;
    /**
     * Allocate funds to make sure they are not spent elsewhere.
     * @summary Create Allocation.
     * @param {Allocation} allocation
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAllocation(allocation: Allocation, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Allocation>;
    /**
     *
     * @summary Get Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocation(allocationId: string, options?: any): AxiosPromise<Allocation>;
    /**
     *
     * @summary Get Allocations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllocations(options?: any): AxiosPromise<Array<Allocation>>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNote(debitNoteId: string, options?: any): AxiosPromise<DebitNote>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<DebitNoteEvent>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<DebitNote>>;
    /**
     * Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand.
     * @summary Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
     * @param {Array<string>} allocationIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDemandDecorations(allocationIds: Array<string>, options?: any): AxiosPromise<MarketDecoration>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, options?: any): AxiosPromise<Invoice>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<InvoiceEvent>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): AxiosPromise<Payment>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get available accounts for sending payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRequestorAccounts(options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueInvoice(invoice: Invoice, options?: any): AxiosPromise<Invoice>;
    /**
     * Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Debit Note.
     * @param {string} debitNoteId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectDebitNote(debitNoteId: string, rejection: Rejection, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Invoice.
     * @param {string} invoiceId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectInvoice(invoiceId: string, rejection: Rejection, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit).
     * @summary Release Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseAllocation(allocationId: string, options?: any): AxiosPromise<void>;
};
/**
 * RequestorApi - interface
 * @export
 * @interface RequestorApi
 */
export interface RequestorApiInterface {
    /**
     * Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.
     * @summary Accept received Debit Note.
     * @param {string} debitNoteId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    acceptDebitNote(debitNoteId: string, acceptance: Acceptance, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.
     * @summary Accept received Invoice.
     * @param {string} invoiceId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    acceptInvoice(invoiceId: string, acceptance: Acceptance, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Amend Allocation.
     * @param {string} allocationId
     * @param {Allocation} allocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    amendAllocation(allocationId: string, allocation: Allocation, options?: any): AxiosPromise<Allocation>;
    /**
     * Allocate funds to make sure they are not spent elsewhere.
     * @summary Create Allocation.
     * @param {Allocation} allocation
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    createAllocation(allocation: Allocation, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Allocation>;
    /**
     *
     * @summary Get Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getAllocation(allocationId: string, options?: any): AxiosPromise<Allocation>;
    /**
     *
     * @summary Get Allocations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getAllocations(options?: any): AxiosPromise<Array<Allocation>>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getDebitNote(debitNoteId: string, options?: any): AxiosPromise<DebitNote>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<DebitNoteEvent>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<DebitNote>>;
    /**
     * Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand.
     * @summary Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
     * @param {Array<string>} allocationIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getDemandDecorations(allocationIds: Array<string>, options?: any): AxiosPromise<MarketDecoration>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getInvoice(invoiceId: string, options?: any): AxiosPromise<Invoice>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<InvoiceEvent>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getPayment(paymentId: string, options?: any): AxiosPromise<Payment>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Get available accounts for sending payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getRequestorAccounts(options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    issueInvoice(invoice: Invoice, options?: any): AxiosPromise<Invoice>;
    /**
     * Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Debit Note.
     * @param {string} debitNoteId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    rejectDebitNote(debitNoteId: string, rejection: Rejection, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Invoice.
     * @param {string} invoiceId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    rejectInvoice(invoiceId: string, rejection: Rejection, timeout?: number, options?: any): AxiosPromise<void>;
    /**
     * The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit).
     * @summary Release Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    releaseAllocation(allocationId: string, options?: any): AxiosPromise<void>;
}
/**
 * RequestorApi - object-oriented interface
 * @export
 * @class RequestorApi
 * @extends {BaseAPI}
 */
export declare class RequestorApi extends BaseAPI implements RequestorApiInterface {
    /**
     * Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.
     * @summary Accept received Debit Note.
     * @param {string} debitNoteId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    acceptDebitNote(debitNoteId: string, acceptance: Acceptance, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.
     * @summary Accept received Invoice.
     * @param {string} invoiceId
     * @param {Acceptance} acceptance
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    acceptInvoice(invoiceId: string, acceptance: Acceptance, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Amend Allocation.
     * @param {string} allocationId
     * @param {Allocation} allocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    amendAllocation(allocationId: string, allocation: Allocation, options?: any): Promise<import("axios").AxiosResponse<Allocation>>;
    /**
     * Allocate funds to make sure they are not spent elsewhere.
     * @summary Create Allocation.
     * @param {Allocation} allocation
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    createAllocation(allocation: Allocation, afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Allocation>>;
    /**
     *
     * @summary Get Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getAllocation(allocationId: string, options?: any): Promise<import("axios").AxiosResponse<Allocation>>;
    /**
     *
     * @summary Get Allocations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getAllocations(options?: any): Promise<import("axios").AxiosResponse<Allocation[]>>;
    /**
     *
     * @summary Get Debit Note.
     * @param {string} debitNoteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getDebitNote(debitNoteId: string, options?: any): Promise<import("axios").AxiosResponse<DebitNote>>;
    /**
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Debit Note events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getDebitNoteEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<import("axios").AxiosResponse<DebitNoteEvent[]>>;
    /**
     *
     * @summary Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getDebitNotes(afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<DebitNote[]>>;
    /**
     * Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand.
     * @summary Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
     * @param {Array<string>} allocationIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getDemandDecorations(allocationIds: Array<string>, options?: any): Promise<import("axios").AxiosResponse<MarketDecoration>>;
    /**
     *
     * @summary Get Invoice.
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getInvoice(invoiceId: string, options?: any): Promise<import("axios").AxiosResponse<Invoice>>;
    /**
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     * @summary Get Invoice events.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getInvoiceEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<import("axios").AxiosResponse<InvoiceEvent[]>>;
    /**
     *
     * @summary Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getInvoices(afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Invoice[]>>;
    /**
     *
     * @summary Get Payment.
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getPayment(paymentId: string, options?: any): Promise<import("axios").AxiosResponse<Payment>>;
    /**
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the \'new\' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed.
     * @summary Get Payments.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getPayments(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string, options?: any): Promise<import("axios").AxiosResponse<Payment[]>>;
    /**
     *
     * @summary Get Payments for Debit Note.
     * @param {string} debitNoteId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getPaymentsForDebitNote(debitNoteId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Payment[]>>;
    /**
     *
     * @summary Get Payments for Invoice.
     * @param {string} invoiceId
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxItems] Maximum number of items that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getPaymentsForInvoice(invoiceId: string, afterTimestamp?: string, maxItems?: number, options?: any): Promise<import("axios").AxiosResponse<Payment[]>>;
    /**
     *
     * @summary Get available accounts for sending payments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getRequestorAccounts(options?: any): Promise<import("axios").AxiosResponse<Account[]>>;
    /**
     *
     * @summary Issue an Invoice.
     * @param {Invoice} invoice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    issueInvoice(invoice: Invoice, options?: any): Promise<import("axios").AxiosResponse<Invoice>>;
    /**
     * Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Debit Note.
     * @param {string} debitNoteId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    rejectDebitNote(debitNoteId: string, rejection: Rejection, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).
     * @summary Reject received Invoice.
     * @param {string} invoiceId
     * @param {Rejection} rejection
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    rejectInvoice(invoiceId: string, rejection: Rejection, timeout?: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit).
     * @summary Release Allocation.
     * @param {string} allocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    releaseAllocation(allocationId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
